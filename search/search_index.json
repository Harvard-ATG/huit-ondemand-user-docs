{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HUIT Open OnDemand","text":"<p>HUIT Open OnDemand is a new platform to provide access to high performance compute (HPC) resources for courses. It runs in AWS using ParallelCluster, unlike other HPC resources used for research that are housed in physical data centers. If you have access to the platform, you can log in via ood.huit.harvard.edu/</p> <p>HUIT Open OnDemand is only available for use in courses. If you want to use it in your course, you need to submit a request at atg.fas.harvard.edu/academic-computing. We need a new request for each semester that you intend to use the platform for, so that we can ensure that the platform is still needed, and that we're providing the software and compute resources required for your course.</p>"},{"location":"#interactive-software","title":"Interactive Software","text":"<p>In OnDemand, users have access to a file management app to access files in their OnDemand home directory through a browser. They also have access to a terminal app that provides browser access to a terminal in the cluster. In addition, we've added a Visual Studio Code app to provide a browser-based IDE that provides another point of entry to the cluster.</p>"},{"location":"#shared-command-line-software","title":"Shared Command Line Software","text":"<p>This platform uses Spack to manage software modules that run on compute nodes. For more information on the shared spack modules, see the Shared Spack Software documentation page.</p> <p>If you prefer to install software to your home directory, or if you want to test out new software configurations, you can install spack directly to your home directory. For more information on that, visit the Local Spack Installation documentation page.</p>"},{"location":"file-management/","title":"File Management","text":"<p>In Open OnDemand, you can access files in your home directory through a browser, rather than a terminal or through an application within Open OnDemand. This allows you to quickly upload or download files, and to make simple edits to text files in your home directory.</p> <p>To get to your files through the browser, use the Files dropdown menu in the bar at the top and click on \"Home Directory\".</p> <p></p> <p>In the home directory tool, you can upload, download, or manipulate your files.</p> <p></p>"},{"location":"shared-folder/","title":"Shared Folder","text":"<p>In HUIT OnDemand, course staff have access to a shared folder for use in their course. Using this shared folder requires use of the terminal, whether through the OnDemand dashboard or through the terminal in the VS Code interface.</p> <p>The shared folder will be located at <code>/shared/courseSharedFolders/$CANVAS_COURSE_ID</code>, where <code>$CANVAS_COURSE_ID</code> can be found in your course's Canvas url: <code>https://canvas.harvard.edu/courses/CANVAS_COURSE_ID</code>.</p> <p>The shared folder should contain two utility scripts; one script configures a link to the folder in the home directory of whoever runs the script, and the other ensures that all content in the folder that the current user can edit has appropriate permisssions.</p>"},{"location":"shared-folder/#creating-a-link-to-the-shared-folder","title":"Creating a link to the shared folder","text":"<p>You can create a link to the shared folder in your home folder with the included script, like so:</p> <pre><code>/shared/courseSharedFolders/$CANVAS_COURSE_ID/map-this.sh\n</code></pre> <p>That script creates a symbolic link in your home directory to the shared folder called <code>share</code>, making it accessible in interactive apps like the VS Code app, and making it easier to access than referencing its absolute location.</p> <p>If you prefer, you can make your own link by modifying this line:</p> <pre><code>ln -s /shared/courseSharedFolders/$COURSE_ID ~/share\n</code></pre>"},{"location":"shared-folder/#fixing-permissions","title":"Fixing permissions","text":"<p>The shared folder works on unix file system permissions, and there are a number of ways for file permissions to get into a state where students can't read files, or course staff can't edit them. If students or teaching staff get error messages about permissions when trying to use files in the shared folder, the <code>fix-permissions.sh</code> script is there to help set things right.</p> <p>The script at <code>/shared/courseSharedFolders/$COURSE_ID/fix-permissions.sh</code> will do two things to any file or folder that you have write access to in the shared folder:</p> <ol> <li>Change the group ownership of the file or folder to the staff group for your course</li> <li>Add group write permissions to the file or folder</li> </ol> <p>If there are files that you did not create in the shared folder, you won't be able to modify their permissions, but running the script will still modify the permissions of files that you created. It will report errors modifying the files you do not own, but that doesn't mean it failed, just that there are files that you couldn't change.</p>"},{"location":"shared-folder/#support","title":"Support","text":"<p>If you have issues with your shared folder, please reach out to ithelp@harvard.edu. Please be sure to include the name of this platform, \"HUIT Open OnDemand\", to help your request get routed appropriately.</p>"},{"location":"spack-local/","title":"Using Spack From Your Home Directory","text":"<p>If you want to use different modules than the shared modules, or if you want to test out a module before requesting that it be installed in the shared context, you can also install a different <code>spack</code> to your home directory.</p>"},{"location":"spack-local/#installing","title":"Installing","text":"<p>Installing Spack just requires cloning its git repository:</p> <pre><code>git clone --depth=100 --branch=releases/v0.21 https://github.com/spack/spack.git ~/spack\n</code></pre> <p>You can change <code>~/spack</code> if you want to install to another location.</p> <p>Once you have Spack cloned, you can find the activation script in <code>&lt;install location&gt;/share/spack/setup-env.sh</code> That means if you installed spack via the command above, you can activate it with</p> <pre><code>. ~/spack/share/spack/setup-env.sh\n</code></pre>"},{"location":"spack-local/#setting-an-upstream","title":"Setting an upstream","text":"<p>You can build all of your own dependencies in your home folder, but it can be more expedient to use the pre-build software in the shared spack installation as a starting point. To enable this, you need to set the shared installation directory as an upstream. The easiest way to do this is to run this command with your local spack environment activated:</p> <pre><code>spack config add upstreams:spack-instance-1:install_tree:/shared/software/spack/opt/spack\n</code></pre>"},{"location":"spack-local/#adding-modules","title":"Adding modules","text":"<p>With a spack installation in your home directory, you can manage your own module installations. You can look for modules with <code>spack list &lt;modulename&gt;</code>, see your installed modules with <code>spack find</code>, and add new modules with <code>spack install &lt;modulename&gt;</code></p> <p>When using <code>spack</code> installed to your home directory, make sure that any scripts that reference local modules activate your spack environment, not the shared environment.</p>"},{"location":"spack-shared-software/","title":"Shared Software with Spack","text":"<p>Our configuration of OnDemand uses a centrally configured repository of command-line software managed by and available through Spack. We provide some pre-installed packages, but if you find that you need some software that is available through Spack, it can be installed to that shared location on request.</p>"},{"location":"spack-shared-software/#make-the-spack-command-available","title":"Make the <code>spack</code> command available","text":"<p>In order to avoid interfering with any other configurations that you may want to set up, Spack is not configured in your terminal by default. Rather, it must be activated with the following command (note the dot at the start, and be sure to include that with the rest):</p> <pre><code>. /shared/software/spack/share/spack/setup-env.sh\n</code></pre> <p>This will make the <code>spack</code> command available in your terminal session. If you want to use the shared <code>spack</code> command in every session, you can add this line to your <code>~/.bashrc</code> file.</p> <p>The Code Server app runs using a Spack module, so the shared <code>spack</code> command is available by default in the terminal inside the VS Code interface.</p>"},{"location":"spack-shared-software/#load-modules-with-spack","title":"Load modules with <code>spack</code>","text":"<p>With the <code>spack</code> command enabled, you can now load modules that have been installed to the shared location. You can list all of the modules available with <code>spack find</code>:</p> <pre><code>$ spack find\n-- linux-amzn2-skylake_avx512 / gcc@7.3.1 -----------------------\nberkeley-db@18.1.40                 curl@8.4.0      htslib@1.17         libdivsufsort@2.0.1  libtool@2.4.7     nghttp2@1.57.0       r@4.3.0               unzip@6.0\nboost@1.83.0                        curl@8.4.0      hwloc@2.9.1         libffi@3.4.4         libunistring@1.1  openjdk@11.0.20.1_1  readline@8.2          util-linux-uuid@2.38.1\nbowtie@1.3.1                        diffutils@3.9   icu4c@67.1          libgff@2.0.0         libxcrypt@4.4.35  openssl@3.1.3        salmon@1.10.2         util-macros@1.19.3\nbzip2@1.0.8                         expat@2.5.0     intel-pin@3.27      libiconv@1.17        libxml2@2.10.3    pcre2@10.42          sqlite@3.43.2         which@2.21\nca-certificates-mozilla@2023-05-30  gdbm@1.23       intel-tbb@2021.9.0  libidn2@2.3.4        likwid@5.2.2      perl@5.38.0          staden-io-lib@1.14.8  xz@5.4.1\ncereal@1.3.2                        gettext@0.22.3  jemalloc@5.3.0      libmd@1.0.4          lua@5.4.4         pigz@2.7             star@2.7.10b          zlib-ng@2.1.4\ncmake@3.27.7                        gmake@4.4.1     libbsd@0.11.7       libpciaccess@0.17    m4@1.4.19         pkgconf@1.9.5        tar@1.34              zstd@1.5.5\ncode-server@4.12.0                  gzip@1.12       libdeflate@1.18     libsigsegv@2.14      ncurses@6.4       python@3.11.6        texinfo@7.0.3\n==&gt; 63 installed packages\n</code></pre> <p>You can load modules with <code>spack load</code> followed by the name of the module. Once you have the module loaded, you'll be able to use the commands that it enables. As an example:</p> <pre><code>$ which likwid-perfctr\n/usr/bin/which: no likwid-perfctr in (/opt/amazon/openmpi/bin:...)\n$ spack load likwid\n$ which likwid-perfctr\n/shared/software/spack/opt/spack/linux-amzn2-skylake_avx512/gcc-7.3.1/likwid-5.2.2-aayxcqg6nj5zykdozo5z4yubzjevxhhm/bin/likwid-perfctr\n</code></pre>"},{"location":"spack-shared-software/#use-in-scripts","title":"Use in scripts","text":"<p>If you are preparing a batch job, be sure to include a line to make the <code>spack</code> command available, and to load the modules that your job needs.</p>"},{"location":"terminal/","title":"Terminal App","text":"<p>Open OnDemand provides access to a browser-based terminal. This terminal runs on a login node in the compute cluster, rather than a compute node, so the terminal environment should not be used directly for computation.</p> <p>Instead, the terminal should be used to queue batch or interactive jobs with slurm commands, or to perform simple, non-intensive tasks in your home directory.</p> <p>To access the terminal app, go to the \"Clusters\" menu item and click on \"academic Shell Access\". This should open a new tab with a terminal interface into an Amazon Linux 2 environment.</p> <p></p> <p>When you connect to the terminal, you should see something similar to the screenshot below. If you are prompted for a password, that indicates that a problem has occurred, so please reach out to support via atg@fas.harvard.edu</p> <p></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#undetermined-state-interactive-apps","title":"\"Undetermined\" State Interactive Apps","text":"<p>When launching an interactive app, you may see an information card like this one:</p> <p></p> <p>If this happens, it is usually because of a problem in your <code>.bashrc</code> file. If you use the dashboard terminal app to connect to a login node, you should see the full error causing the problem. The error message should point to a solution to apply to your <code>.bashrc</code> file, but if you have trouble finding a solution, reach out to ithelp@harvard.edu for further assistance.</p> <p>With a working <code>.bashrc</code> file, interactive apps should start functioning normally. However, sessions that you started will still be running. You can cancel these sessions by first finding their job ID with the <code>squeue</code> command in the dashboard terminal to see your running jobs with IDs. Then, run <code>scancel {jobid}</code> (don't include the curly braces) to cancel the running job.</p> <p>The \"Undetermined\" state cards will also persist in your interactive session history. If you wish to clean them up and remove them, take note of the session ID in the card. You can remove the corresponding file in your home directory with a <code>rm ~/ondemand/data/sys/dashboard/batch_connect/db/{session_id}</code> command from the dashboard terminal or any interactive app with terminal access.</p>"},{"location":"vscode-app/","title":"VS Code App (Code Server)","text":"<p>We have added a Visual Studio Code app to the Open OnDemand interface, to provide a full-featured IDE with access to the cluster through your browser. You can set this app to run for a pre-determined amount of time, and can allocate up to 4 CPUs from the cluster to your interactive session (although we do ask that you do your best not to allocate more resources than you need).</p> <p>To start, go to the \"Interactive Apps\" menu and select \"Code Server\"</p> <p></p> <p>You'll then be presented with some options for how many CPUs you need, and how long you expect to work for. Pick your options, then click \"Launch\"</p> <p></p> <p>You should see a screen like the screenshot below, where your Code Server session will appear queued. Depending on the resources available in the platform, your session may take several minutes to start as new compute instances are prepared for use.</p> <p></p> <p>Once your compute resources have been allocated and your environment is ready, you'll see that your session is \"Running\", and you'll have a button to launch. Click \"Connect to VS Code\" to access the VS Code interface.</p> <p></p> <p>Once you click the button to connect, you should be directed to a VS Code interface like this one. You shouldn't be prompted for a password, and if you are, that indicates an issue with how the VS Code app is working, so please reach out to support via atg@fas.harvard.edu</p> <p></p>"},{"location":"vscode-app/#slurm-commands-from-vs-code-interface","title":"Slurm commands from VS Code interface","text":"<p>When in the terminal in VS Code, you have access to the same slurm commands that are available in the terminal that runs on the login node, accessible from the OnDemand dashboard. However, the commands may behave differently, since the VS Code interface is running as part of an existing slurm job. For instance, you cannot allocate additional CPUs via regular <code>srun</code> commands, beyond what the VS Code interface is already running. However, <code>sbatch</code> commands can dispatch jobs with additional resources from this context. If you find other problematic slurm behavior from the VS Code interface, especially if you have found a workaround, let us know by opening an issue in the repository for this documentation: github.com/Harvard-ATG/huit-ondemand-user-docs/issues</p>"}]}